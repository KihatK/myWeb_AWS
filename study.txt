express js에서 req.user가 틀렸다고 할 땐
types/express에 index.d.ts에
import User from '../../models/user';

declare module 'express-serve-static-core' {
  interface Request {
    user?: User
  }
}
를 넣는다.
---------------------------------------------------
backend import가 작동이 되지 않을 때는
tsconfig.json에
"module": "commonjs",
commonjs로 바꿔야 한다.
---------------------------------------------------
react render 함수에 인자가 들어가는 경우
const ... = useCallback(value => () => {

});
이런 식으로 만든다.
----------------------------------------------------
const blocksFromHTML = convertFromHTML(editing);
    const state = ContentState.createFromBlockArray(
        blocksFromHTML.contentBlocks,
        blocksFromHTML.entityMap,
    );

    const [editorState, setEditorState] = useState(() => EditorState.createWithContent(state));
html을 editorState로 만드는 법이다. ContentState는 draft-js에서 import한다.

const [editorState, setEditorState] = useState(() => EditorState.createWithContent(state));
그리고 이 명령어로 editorState에 넣기
--------------------------------------------------------------------------------------
await Promise.all(scategories.map(async (s: Scategory) => {
    const posts = await Post.findAll({
        where: { ScategoryId: s.id },
        order: [['createdAt', 'DESC']],
    });
    return await Promise.all(posts.map((p: Post) => {
        return Post.destroy({ where: { id: p.id } })
    }));
}));
이 코드를 통해서 Bcategory를 제거할 때 미리 구해둔 scategory에 속하는 게시글을 모두 지우게 하였다.
await Promise.all 중첩
-------------------------------------------------------------------------------------------
React 기본 원리
React는 처음 실행할 때는 파일 안 모든 명령어를 실행하고 그 뒤로부터는 state가 바뀔 때마다 다시 모든 코드를 리렌더링한다.
그리고 state를 바꿨을 때는 다음 랜더링부터 반영된다.
실질적으로는 다음 랜더링부터 state가 바뀐 것이 반영된다고 할 수 있다.
예외적으로 useEffect는 기본적으로 렌더링 된 직후마다 실행된다.
2번째 파라미터에 아무 값도 들어있지 않다면 첫번째 랜더링 직후에만 실행되고
2번째 파라미터에 hook으로 만들어진 값들이 있다면 리랜더링 직후에 2번째 파라미터에 들어있는 값들이 랜더링 전과 후를 비교하여 바뀌었으면 
useEffect 내부 명령어만 실행한다.
만약 useEffect 명령문으로 인해 state 값이 바뀐다면 리랜더링이 다시 일어난다.
state가 바뀌지 않았다면 리랜더링이 이루어지지 않아 화면에서 볼 때는 차이를 못 느낀다.
----------------------------------------------------------------------------------------
리액트 hooks를 사용할 때 컴포넌트 내에 있는 모든 hook이 실행되어야 에러가 생기지 않는다.
그러므로 return은 useState, useCallback, useEffect 같은 훅들 아래에 return문을 만들어야 한다.
----------------------------------------------------------------------------------------
익스프레스 라우터를 사용할 때 /:id 같은 params는 맨 밑에 있는 것이 좋다.
뜬금없이 /follower 같은 것이 걸려서 params라고 착각할 수 있기 때문이다.
---------------------------------------------------------------------------------------
{
    "compilerOptions": {
        "module": "commonjs",
        "esModuleInterop": true,  //export로 된 것들을 객체로 모아서 import * as를 사용하지 않게 함.
        "allowSyntheticDefaultImports": true,  //import 문법을 사용할 수 있게 함
        "target": "es6",
        "noImplicitAny": true,
        "moduleResolution": "node",
        "sourceMap": true,
        "outDir": "dist",  //dist 폴더를 만들어서 그 안에 js 파일들을 보관함.
        "typeRoots": ["./types"]
    },
}
tsc를 이렇게 해야 편하게 import from 을 사용할 수 있다.
그리고 @types/bluebird 모듈도 받으면 types error를 더 줄일 수 있다.
